name: CI Dispatcher

on:
  workflow_call:
    inputs:
      runner_label:
        description: "Runner label"
        required: false
        type: string
        default: "ubuntu-latest"
      workspace:
        description: "Workspace path"
        required: true
        type: string
      group:
        description: "Group name"
        required: true
        type: string
      project:
        description: "Project name"
        required: true
        type: string
      environment:
        description: "Environment"
        required: true
        type: string
      instance:
        description: "Instance type"
        required: true
        type: string
      pool:
        description: "Pool"
        required: true
        type: string

  workflow_dispatch:
    inputs:
      runner_label:
        description: "Runner label"
        required: false
        default: "ubuntu-latest"
      workspace:
        description: "Workspace path (leave empty to use runner workspace)"
        required: false
        default: ""
      group:
        description: "Group name"
        required: false
        default: "kellanova"
      project:
        description: "Project name"
        required: false
        default: "demo-project"
      environment:
        description: "Environment"
        required: false
        default: "dev"
      instance:
        description: "Instance type"
        required: false
        default: "instance1"
      pool:
        description: "Pool"
        required: false
        default: "kstl"

jobs:
  run-scripts:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout caller repository (default)
        uses: actions/checkout@v4

      - name: Checkout template repository (self)
        uses: actions/checkout@v4
        with:
          repository: rakesh26955/kellanova-dmit-template-advanced-test
          ref: main
          path: template

      - name: Resolve workspace
        id: resolve
        run: |
          RAW="${{ inputs.workspace || github.event.inputs.workspace || '' }}"
          if [ -z "$RAW" ] || [ "$RAW" = "workspace" ] || [ "$RAW" = "." ]; then
            echo "workspace=$GITHUB_WORKSPACE" >> $GITHUB_OUTPUT
          else
            echo "workspace=$RAW" >> $GITHUB_OUTPUT
          fi

      - name: Prepare workspace (ensure at least one .zip)
        env:
          W: ${{ steps.resolve.outputs.workspace }}
        run: |
          set -euo pipefail
          W="${W:-}"
          mkdir -p "$W"
          # count zip files (works even if none)
          ZIPCOUNT=0
          for f in "$W"/*.zip; do
            if [ -e "$f" ]; then ZIPCOUNT=$((ZIPCOUNT+1)); fi
          done
          if [ "$ZIPCOUNT" -eq 0 ]; then
            echo "No .zip found in $W â€” creating dummy package"
            mkdir -p "$W/.ci_dummy"
            echo "placeholder" > "$W/.ci_dummy/README.txt"
            if command -v zip >/dev/null 2>&1; then
              (cd "$W" && zip -r ".dummy-package.zip" ".ci_dummy" > /dev/null || true)
            else
              # use python one-liner to create a zip (avoids heredoc complexity)
              python3 - <<'PY'
import zipfile, os
w = os.environ.get('W', '.')
zf = os.path.join(w, '.dummy-package.zip')
with zipfile.ZipFile(zf, 'w') as z:
    p = os.path.join(w, '.ci_dummy', 'README.txt')
    if os.path.exists(p):
        z.write(p, 'README.txt')
print(zf)
PY
            fi
            echo "Dummy package created in $W"
          else
            echo "Found $ZIPCOUNT .zip file(s) in $W"
          fi

      - name: Show script (head) if present
        run: |
          SCRIPT="template/.github/scripts/deploy-content-packages.sh"
          if [ -f "$SCRIPT" ]; then
            head -n 200 "$SCRIPT" || true
            ls -l "$SCRIPT"
          else
            echo "ERROR: $SCRIPT not found"
            exit 2
          fi

      - name: Run deploy-content-packages.sh (traced)
        run: |
          set -euo pipefail
          SCRIPT="template/.github/scripts/deploy-content-packages.sh"
          chmod +x "$SCRIPT" || true
          W="${{ steps.resolve.outputs.workspace }}"
          G="${{ inputs.group || github.event.inputs.group }}"
          P="${{ inputs.project || github.event.inputs.project }}"
          E="${{ inputs.environment || github.event.inputs.environment }}"
          I="${{ inputs.instance || github.event.inputs.instance }}"
          PO="${{ inputs.pool || github.event.inputs.pool }}"
          echo "Running: $SCRIPT $W $G $P $E $I $PO"
          bash -x "$SCRIPT" "$W" "$G" "$P" "$E" "$I" "$PO"
