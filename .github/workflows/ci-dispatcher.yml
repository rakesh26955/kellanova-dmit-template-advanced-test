name: Run Both Shell Scripts Sequentially (callable & manual)

on:
  workflow_call:
    inputs:
      runner_label:
        description: "Runner label (string)"
        required: false
        type: string
        default: "ubuntu-latest"
      workspace:
        description: "Workspace path"
        required: true
        type: string
      group:
        description: "Group name"
        required: true
        type: string
      project:
        description: "Project name"
        required: true
        type: string
      environment:
        description: "Environment"
        required: true
        type: string
      instance:
        description: "Instance type"
        required: true
        type: string
      pool:
        description: "Pool"
        required: true
        type: string

  workflow_dispatch:
    inputs:
      runner_label:
        description: "Runner label"
        required: false
        default: "ubuntu-latest"
        type: choice
        options:
          - ubuntu-latest
          - self-hosted-0009
      workspace:
        description: "Workspace path (use runner workspace if empty)"
        required: false
        default: ""
      group:
        description: "Group name"
        required: false
        default: "kellanova"
      project:
        description: "Project name"
        required: false
        default: "demo-project"
      environment:
        description: "Environment"
        required: false
        default: "dev"
        type: choice
        options:
          - dev
          - stage
          - prod
      instance:
        description: "Instance type"
        required: false
        default: "instance1"
      pool:
        description: "Pool (select)"
        required: false
        default: "kstl"
        type: choice
        options:
          - kstl
          - kfr

jobs:
  run-scripts:
    runs-on: ${{ inputs.runner_label || github.event.inputs.runner_label || 'ubuntu-latest' }}

    steps:
      - name: Checkout caller repository (default)
        uses: actions/checkout@v4

      - name: Checkout template repository (where the scripts live)
        uses: actions/checkout@v4
        with:
          repository: rakesh26955/kellanova-dmit-template-advanced-test
          ref: main
          path: template
          # if repo is private when called cross-repo, add token: ${{ secrets.TEMPLATE_PAT }}

      - name: Resolve workspace
        id: resolve
        run: |
          set -euo pipefail
          RAW="${{ inputs.workspace || github.event.inputs.workspace || '' }}"
          if [ -z "$RAW" ] || [ "$RAW" = "workspace" ] || [ "$RAW" = "." ]; then
            echo "using_runner_workspace=true" >> $GITHUB_OUTPUT
            echo "workspace=$GITHUB_WORKSPACE" >> $GITHUB_OUTPUT
          else
            echo "using_runner_workspace=false" >> $GITHUB_OUTPUT
            echo "workspace=$RAW" >> $GITHUB_OUTPUT
          fi

      - name: Prepare workspace (create dummy zip if none)
        run: |
          set -euo pipefail
          W="${{ steps.resolve.outputs.workspace }}"
          if [ ! -d "$W" ]; then mkdir -p "$W"; fi
          ZIP_COUNT=$(bash -lc "shopt -s nullglob; set -- \"$W\"/*.zip; echo \$#")
          if [ "$ZIP_COUNT" -eq 0 ]; then
            mkdir -p "$W/.ci_dummy_for_dispatcher"
            echo "placeholder" > "$W/.ci_dummy_for_dispatcher/README.txt"
            if command -v zip >/dev/null 2>&1; then
              (cd "$W" && zip -r ".dummy-package.zip" ".ci_dummy_for_dispatcher" > /dev/null || true)
            else
              python - <<'PY'
import zipfile, os, sys
w = os.environ.get("W", sys.argv[1])
zf = os.path.join(w, ".dummy-package.zip")
with zipfile.ZipFile(zf, "w") as z:
    z.write(os.path.join(w, ".ci_dummy_for_dispatcher", "README.txt"), "README.txt")
print(zf)
PY
            fi
            echo "Dummy zip created in $W"
          else
            echo "Found $ZIP_COUNT zip(s) in $W"
          fi
        env:
          W: ${{ steps.resolve.outputs.workspace }}

      - name: Show script (head) if present
        run: |
          SCRIPT="template/.github/scripts/deploy-content-packages.sh"
          if [ -f "$SCRIPT" ]; then head -n 200 "$SCRIPT" || true; ls -l "$SCRIPT"; else echo "ERROR: $SCRIPT not found" && exit 2; fi

      - name: Run deploy-content-packages.sh (traced)
        run: |
          set -euo pipefail
          SCRIPT="template/.github/scripts/deploy-content-packages.sh"
          chmod +x "$SCRIPT" || true
          W="${{ steps.resolve.outputs.workspace }}"
          G="${{ inputs.group || github.event.inputs.group }}"
          P="${{ inputs.project || github.event.inputs.project }}"
          E="${{ inputs.environment || github.event.inputs.environment }}"
          I="${{ inputs.instance || github.event.inputs.instance }}"
          PO="${{ inputs.pool || github.event.inputs.pool }}"
          echo "Running: $SCRIPT $W $G $P $E $I $PO"
          bash -x "$SCRIPT" "$W" "$G" "$P" "$E" "$I" "$PO"
