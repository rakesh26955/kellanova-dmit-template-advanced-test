name: CI Dispatcher — reusable deploy workflow

on:
  workflow_call:
    inputs:
      workspace:
        description: "Workspace path (relative to caller repo root)"
        required: true
        type: string
      group:
        description: "Group name"
        required: true
        type: string
      project:
        description: "Project name"
        required: true
        type: string
      environment:
        description: "Environment name (dev, stage, prod)"
        required: true
        type: string
      instance:
        description: "Instance (author|publish|both)"
        required: true
        type: string
      pool:
        description: "Pool (kstl|kfr|gen|dam|kstl65|kfr65|newkstl65|kfr63|...)"
        required: true
        type: string

permissions:
  contents: read

jobs:
  dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout caller repository
        uses: actions/checkout@v4
        with:
          path: app

      - name: Checkout kellanova repo (scripts & config) into temp
        uses: actions/checkout@v4
        with:
          repository: rakesh26955/kellanova-dmit-template-advanced-test
          ref: main
          path: temp
          persist-credentials: false

      - name: Ensure scripts are executable
        run: chmod +x temp/.github/scripts/*.sh || true

      - name: Verify server.properties exists
        run: |
          CONFIG_PATH="temp/.github/config/server.properties"
          echo "Looking for: $CONFIG_PATH"
          if [ ! -f "$CONFIG_PATH" ]; then
            echo "❌ ERROR: Expected config file not found at $CONFIG_PATH" >&2
            exit 1
          fi
          echo "✅ Config file found."
          head -n 20 "$CONFIG_PATH" || true

      - name: Validate inputs & normalize
        id: validate
        env:
          WORKSPACE: ${{ inputs.workspace }}
          GROUP: ${{ inputs.group }}
          PROJECT: ${{ inputs.project }}
          ENVIRONMENT: ${{ inputs.environment }}
          INSTANCE: ${{ inputs.instance }}
          POOL: ${{ inputs.pool }}
        run: |
          set -euo pipefail
          echo "workspace=$WORKSPACE" >> "$GITHUB_OUTPUT"
          echo "group=$GROUP" >> "$GITHUB_OUTPUT"
          echo "project=$PROJECT" >> "$GITHUB_OUTPUT"
          echo "environment=$ENVIRONMENT" >> "$GITHUB_OUTPUT"
          echo "instance=$INSTANCE" >> "$GITHUB_OUTPUT"
          echo "pool=$POOL" >> "$GITHUB_OUTPUT"

          case "$ENVIRONMENT" in
            dev) MAPPED_ENV="dev" ;;
            stage) MAPPED_ENV="stg" ;;
            prod) MAPPED_ENV="prd" ;;
            *) echo "ERROR: Invalid environment: $ENVIRONMENT" >&2; exit 1 ;;
          esac
          echo "mapped_environment=$MAPPED_ENV" >> "$GITHUB_OUTPUT"

      - name: Check for .zip files in workspace
        run: |
          WS="app/${{ steps.validate.outputs.workspace }}"
          echo "Checking for .zip packages in: $WS"
          if compgen -G "${WS}/*.zip" > /dev/null; then
            ls -la ${WS}/*.zip || true
          else
            echo "No .zip files found in $WS" >&2
            exit 1
          fi

      - name: Run deploy wrapper
        env:
          SERVER_CONFIG: ${{ github.workspace }}/temp/.github/config/server.properties
          DEBUG: "false"
          SKIP_DEPLOY: "true"   # 👈 prevents curl uploads during CI runs
        run: |
          DEPLOY_WRAPPER="temp/.github/scripts/deploy-content-packages.sh"
          if [ -x "$DEPLOY_WRAPPER" ]; then
            echo "Using config: $SERVER_CONFIG"
            bash "$DEPLOY_WRAPPER" \
              "app/${{ steps.validate.outputs.workspace }}" \
              "${{ steps.validate.outputs.group }}" \
              "${{ steps.validate.outputs.project }}" \
              "${{ steps.validate.outputs.mapped_environment }}" \
              "${{ steps.validate.outputs.instance }}" \
              "${{ steps.validate.outputs.pool }}"
          else
            echo "ERROR: Deploy wrapper not found at $DEPLOY_WRAPPER" >&2
            exit 1
          fi

      - name: Cleanup (always)
        if: always()
        run: echo "Cleanup complete."
