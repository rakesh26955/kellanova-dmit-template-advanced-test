name: Run Both Shell Scripts Sequentially (env: dev|stage|prod)

on:
  workflow_call:
    inputs:
      workspace:
        description: "Workspace path (relative to caller repo root)"
        required: true
        type: string
      group:
        description: "Group name"
        required: true
        type: string
      project:
        description: "Project name"
        required: true
        type: string
      environment:
        description: "Environment name (dev, stage, prod)"
        required: true
        type: string
      instance:
        description: "Instance (author|publish|both)"
        required: true
        type: string
      pool:
        description: "Pool (kstl|kfr|gen|dam|kstl65|kfr65|...)"
        required: true
        type: string
    secrets:
      GH_Token:
        required: true

  workflow_dispatch:
    inputs:
      workspace:
        description: "Workspace path (relative to repo root)"
        required: true
        type: string
      group:
        description: "Group name"
        required: true
        type: string
      project:
        description: "Project name"
        required: true
        type: string
      environment:
        description: "Environment name (dev, stage, prod)"
        required: true
        type: string
      instance:
        description: "Instance (author|publish|both)"
        required: true
        type: string
      pool:
        description: "Pool (kstl|kfr|gen|dam|kstl65|kfr65...)"
        required: true
        type: string

permissions:
  contents: write

jobs:
  run-scripts:
    runs-on: self-hosted-0009
    steps:
      - name: Checkout caller (application) repository
        uses: actions/checkout@v4
        with:
          path: app

      - name: Checkout template repository (scripts)
        uses: actions/checkout@v4
        with:
          repository: rakesh26955/kellanova-dmit-template-advanced-test
          ref: dev
          token: ${{ secrets.GH_Token }}
          path: temp
          persist-credentials: false

      - name: Make deploy script(s) executable
        run: chmod +x temp/.github/scripts/*.sh

      - name: Validate inputs & map environment token
        id: validate
        run: |
          # Allowed values for Environment (user-facing)
          allowed_envs="dev stage prod"
          allowed_instances="author publish both"
          allowed_pools="kstl kfr gen dam kstl65 kfr65 newkstl65 kfr63"

          # Resolve inputs (works for both workflow_call and workflow_dispatch)
          IN_WORKSPACE="${{ inputs.workspace || github.event.inputs.workspace }}"
          IN_GROUP="${{ inputs.group || github.event.inputs.group }}"
          IN_PROJECT="${{ inputs.project || github.event.inputs.project }}"
          IN_ENV="${{ inputs.environment || github.event.inputs.environment }}"
          IN_INSTANCE="${{ inputs.instance || github.event.inputs.instance }}"
          IN_POOL="${{ inputs.pool || github.event.inputs.pool }}"

          echo "Resolved inputs:"
          echo "  workspace: $IN_WORKSPACE"
          echo "  group:     $IN_GROUP"
          echo "  project:   $IN_PROJECT"
          echo "  environment: $IN_ENV"
          echo "  instance:  $IN_INSTANCE"
          echo "  pool:      $IN_POOL"

          # simple contains helper
          contains() {
            list="$1"
            item="$2"
            for t in $list; do
              if [ "$t" = "$item" ]; then
                return 0
              fi
            done
            return 1
          }

          if ! contains "$allowed_envs" "$IN_ENV"; then
            echo "ERROR: Invalid environment: $IN_ENV"
            echo "Allowed values: $allowed_envs"
            exit 1
          fi

          if ! contains "$allowed_instances" "$IN_INSTANCE"; then
            echo "ERROR: Invalid instance: $IN_INSTANCE"
            echo "Allowed values: $allowed_instances"
            exit 1
          fi

          if ! contains "$allowed_pools" "$IN_POOL"; then
            echo "ERROR: Invalid pool: $IN_POOL"
            echo "Allowed values: $allowed_pools"
            exit 1
          fi

          # Map user-friendly environment to script tokens expected by deploy scripts:
          # dev  -> dev
          # stage -> stg
          # prod  -> prd
          case "$IN_ENV" in
            dev) MAPPED_ENV="dev" ;;
            stage) MAPPED_ENV="stg" ;;
            prod) MAPPED_ENV="prd" ;;
            *) echo "Unexpected mapping error for $IN_ENV"; exit 1 ;;
          esac

          echo "mapped_environment=${MAPPED_ENV}" >> "$GITHUB_OUTPUT"
          echo "workspace=${IN_WORKSPACE}" >> "$GITHUB_OUTPUT"
          echo "group=${IN_GROUP}" >> "$GITHUB_OUTPUT"
          echo "project=${IN_PROJECT}" >> "$GITHUB_OUTPUT"
          echo "instance=${IN_INSTANCE}" >> "$GITHUB_OUTPUT"
          echo "pool=${IN_POOL}" >> "$GITHUB_OUTPUT"

      - name: Check for .zip files in workspace
        run: |
          WS="app/${{ steps.validate.outputs.workspace }}"
          echo "Checking for .zip files in: ${WS}"
          if compgen -G "${WS}/*.zip" > /dev/null; then
            echo ".zip files found."
          else
            echo "No .zip files found in '${WS}'. Aborting."
            exit 1
          fi

      - name: Run deploy-content-packages wrapper
        run: |
          DEPLOY_WRAPPER="temp/.github/scripts/deploy-content-packages.sh"
          chmod +x "$DEPLOY_WRAPPER" || true
          bash "$DEPLOY_WRAPPER" \
            "app/${{ steps.validate.outputs.workspace }}" \
            "${{ steps.validate.outputs.group }}" \
            "${{ steps.validate.outputs.project }}" \
            "${{ steps.validate.outputs.mapped_environment }}" \
            "${{ steps.validate.outputs.instance }}" \
            "${{ steps.validate.outputs.pool }}"

      - name: Optional brief wait
        if: always()
        run: sleep 15
