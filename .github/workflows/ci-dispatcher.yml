name: Run Both Shell Scripts Sequentially (fixed-checkout)

on:
  workflow_call:
    inputs:
      runner_label:
        description: "Runner label to use (e.g. self-hosted-0009 or ubuntu-latest)"
        required: false
        type: string
        default: "ubuntu-latest"
      workspace:
        description: "Workspace path"
        required: true
        type: string
      group:
        description: "Group name"
        required: true
        type: string
      project:
        description: "Project name"
        required: true
        type: string
      environment:
        description: "Environment name (dev, stage, prod)"
        required: true
        type: string
      instance:
        description: "Instance type"
        required: true
        type: string
      pool:
        description: "Pool name (kstl, kfr)"
        required: true
        type: string

jobs:
  run-scripts:
    runs-on: ${{ inputs.runner_label }}

    steps:
      # 1) Checkout the caller repository (this is the default behavior)
      - name: Checkout caller repository (default)
        uses: actions/checkout@v4
        # Note: this checks out the repository that triggered the workflow (the caller)

      # 2) Checkout the template repository explicitly into `template/`
      - name: Checkout template repository (where the scripts live)
        uses: actions/checkout@v4
        with:
          repository: rakesh26955/kellanova-dmit-template-advanced-test
          ref: main
          path: template
          # If the template repo is private and not accessible with GITHUB_TOKEN,
          # add a token: ${{ secrets.PERSONAL_ACCESS_TOKEN }} here and set that secret
          # in the caller repository to enable reading the private template repo.

      - name: Show repo layout for debugging
        run: |
          echo "PWD=$(pwd)"
          echo "Root listing:"
          ls -la || true
          echo "Caller repo listing (root):"
          ls -la . || true
          echo "Template checkout listing (template/):"
          ls -la template || true
          echo "Template .github/scripts listing:"
          ls -la template/.github || true
          ls -la template/.github/scripts || true

      - name: Show script (head) if present (template)
        run: |
          SCRIPT_PATH="template/.github/scripts/deploy-content-packages.sh"
          if [ -f "$SCRIPT_PATH" ]; then
            echo "Found $SCRIPT_PATH - printing head (first 200 lines):"
            head -n 200 "$SCRIPT_PATH" || true
            stat -c '%A %U %G %s %y' "$SCRIPT_PATH" || ls -l "$SCRIPT_PATH" || true
          else
            echo "ERROR: $SCRIPT_PATH not found in template checkout"
            exit 2
          fi

      - name: Ensure script exists, make executable and run (traced) from template
        run: |
          set -euo pipefail
          SCRIPT_PATH="template/.github/scripts/deploy-content-packages.sh"

          if [ ! -f "$SCRIPT_PATH" ]; then
            echo "ERROR: Expected script at $SCRIPT_PATH but it does not exist."
            ls -la template || true
            exit 2
          fi

          # optional: convert CRLF -> LF if needed (no-op if dos2unix unavailable)
          if command -v dos2unix >/dev/null 2>&1; then
            dos2unix "$SCRIPT_PATH" || true
          fi

          chmod +x "$SCRIPT_PATH"
          echo "Running $SCRIPT_PATH with arguments:"
          echo "  workspace='${{ inputs.workspace }}'"
          echo "  group='${{ inputs.group }}'"
          echo "  project='${{ inputs.project }}'"
          echo "  environment='${{ inputs.environment }}'"
          echo "  instance='${{ inputs.instance }}'"
          echo "  pool='${{ inputs.pool }}'"

          bash -x "$SCRIPT_PATH" \
            "${{ inputs.workspace }}" \
            "${{ inputs.group }}" \
            "${{ inputs.project }}" \
            "${{ inputs.environment }}" \
            "${{ inputs.instance }}" \
            "${{ inputs.pool }}"
