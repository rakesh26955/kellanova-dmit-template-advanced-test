name: CI Dispatcher

on:
  workflow_call:
    inputs:
      runner_label:
        description: "Runner label (string)"
        required: false
        type: string
        default: "ubuntu-latest"
      workspace:
        description: "Workspace path"
        required: true
        type: string
      group:
        description: "Group name"
        required: true
        type: string
      agency:
        description: "Agency"
        required: true
        type: string
      project:
        description: "Project name"
        required: true
        type: string
      environment:
        description: "Environment"
        required: true
        type: string
      instance:
        description: "Instance type"
        required: true
        type: string
      pool:
        description: "Pool"
        required: true
        type: string

  workflow_dispatch:
    inputs:
      runner_label:
        description: "Runner label"
        required: false
        type: choice
        default: "ubuntu-latest"
        options:
          - ubuntu-latest
          - self-hosted-0009
      workspace:
        description: "Workspace path (leave empty to use runner workspace)"
        required: false
        default: ""
      group:
        description: "Group name"
        required: false
        default: "kellanova"
      agency:
        description: "Agency (choose)"
        required: false
        type: choice
        default: "agency-a"
        options:
          - agency-a
          - agency-b
          - agency-c
      project:
        description: "Project name"
        required: false
        default: "demo-project"
      environment:
        description: "Environment (choose)"
        required: false
        type: choice
        default: "dev"
        options:
          - dev
          - stage
          - prod
      instance:
        description: "Instance type"
        required: false
        default: "instance1"
      pool:
        description: "Pool"
        required: false
        type: choice
        default: "kstl"
        options:
          - kstl
          - kfr

jobs:
  run-scripts:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout caller repository (default)
        uses: actions/checkout@v4

      - name: Checkout template repository (self)
        uses: actions/checkout@v4
        with:
          repository: rakesh26955/kellanova-dmit-template-advanced-test
          ref: main
          path: template

      - name: Resolve effective inputs
        id: resolve
        run: |
          # prefer workflow_call inputs when present; otherwise use workflow_dispatch inputs
          # WORKSPACE is required for workflow_call; for manual runs this may be empty and we'll fallback to GITHUB_WORKSPACE
          WORKSPACE="${{ inputs.workspace || github.event.inputs.workspace || '' }}"
          GROUP="${{ inputs.group || github.event.inputs.group || '' }}"
          AGENCY="${{ inputs.agency || github.event.inputs.agency || '' }}"
          PROJECT="${{ inputs.project || github.event.inputs.project || '' }}"
          ENV="${{ inputs.environment || github.event.inputs.environment || '' }}"
          INSTANCE="${{ inputs.instance || github.event.inputs.instance || '' }}"
          POOL="${{ inputs.pool || github.event.inputs.pool || '' }}"
          RUNNER_LABEL="${{ inputs.runner_label || github.event.inputs.runner_label || '' }}"

          if [ -z "$WORKSPACE" ] || [ "$WORKSPACE" = "workspace" ] || [ "$WORKSPACE" = "." ]; then
            WORKSPACE="$GITHUB_WORKSPACE"
          fi

          echo "workspace=$WORKSPACE" >> $GITHUB_OUTPUT
          echo "group=$GROUP" >> $GITHUB_OUTPUT
          echo "agency=$AGENCY" >> $GITHUB_OUTPUT
          echo "project=$PROJECT" >> $GITHUB_OUTPUT
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "instance=$INSTANCE" >> $GITHUB_OUTPUT
          echo "pool=$POOL" >> $GITHUB_OUTPUT
          echo "runner_label=$RUNNER_LABEL" >> $GITHUB_OUTPUT

      - name: Check for packages (.zip) and set flag
        id: zipcheck
        run: |
          W="${{ steps.resolve.outputs.workspace }}"
          mkdir -p "$W"
          COUNT=0
          for f in "$W"/*.zip; do
            if [ -e "$f" ]; then COUNT=$((COUNT+1)); fi
          done
          echo "found=$COUNT" >> $GITHUB_OUTPUT
          echo "Found $COUNT .zip(s) in $W"

      - name: Show script (head) if present
        if: steps.zipcheck.outputs.found != '0'
        run: |
          SCRIPT="template/.github/scripts/deploy-content-packages.sh"
          if [ -f "$SCRIPT" ]; then
            echo "=== script head ==="
            head -n 200 "$SCRIPT" || true
            ls -l "$SCRIPT"
          else
            echo "ERROR: $SCRIPT not found"
            exit 2
          fi

      - name: Run deploy-content-packages.sh (traced)
        if: steps.zipcheck.outputs.found != '0'
        run: |
          set -euo pipefail
          SCRIPT="template/.github/scripts/deploy-content-packages.sh"
          chmod +x "$SCRIPT" || true

          W="${{ steps.resolve.outputs.workspace }}"
          G="${{ steps.resolve.outputs.group }}"
          A="${{ steps.resolve.outputs.agency }}"
          P="${{ steps.resolve.outputs.project }}"
          E="${{ steps.resolve.outputs.environment }}"
          I="${{ steps.resolve.outputs.instance }}"
          PO="${{ steps.resolve.outputs.pool }}"

          echo "Running: $SCRIPT $W $G $A $P $E $I $PO"
          bash -x "$SCRIPT" "$W" "$G" "$A" "$P" "$E" "$I" "$PO"

      - name: No packages found (skipped deploy)
        if: steps.zipcheck.outputs.found == '0'
        run: |
          echo "No .zip files found in workspace. Skipping deploy step. (No files created.)"
